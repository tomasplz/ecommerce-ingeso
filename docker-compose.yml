services:
  # ---------- FRONTEND (React) ----------


  # ---------- BACKEND (NestJS) ----------

  backend:
    build: ./backend
    restart: unless-stopped
    depends_on:
      postgres-db:
        condition: service_healthy
      mongo-db:
        condition: service_healthy
    ports:
      - "3000:3000"
    networks:
      - app-network
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - MONGO_DB_NAME=${MONGO_DB_NAME}
      - MONGO_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}


  # ---------- INFRA ----------
  postgres-db:
    image: postgres:15-alpine
    container_name: postgres_db
    restart: unless-stopped
    networks:
      - app-network
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-db:
    image: mongo:7
    container_name: mongo_db
    restart: unless-stopped
    networks:
      - app-network
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 10s
      timeout: 5s
      retries: 5
  

      
networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  mongo_data: